#!/usr/bin/python
# Used to generate source_root() calls

import logging
import os
import sys
from all_source_roots import AllSourceRoots


logger = logging.getLogger(__name__)


class RootBuildGenerator(object):

  def __init__(self):
    pass

  def generate(self):
    roots = AllSourceRoots()
    roots.findRoots()

    contents = "# Automatically generated by %s\n\n" % (os.path.basename(sys.argv[0]))

    for root in roots.sourceroots['java']: 
      contents += "source_root('{0}', annotation_processor, jvm_binary, java_library, jar_library)\n".format(root)
    for root in roots.sourceroots['javaTest']:
      contents += "source_root('{0}', java_library, junit_tests, jar_library)\n".format(root)
    for root in roots.sourceroots['resources']:
      contents += "source_root('{0}', jaxb_library, page, resources)\n".format(root)
    for root in roots.sourceroots['proto']:
      contents += "source_root('{0}', java_protobuf_library, jar_library)\n".format(root)
    for root in roots.sourceroots['antlr']:
      contents += "source_root('{0}', java_antlr_library)\n".format(root)

    return contents


def main():
  print RootBuildGenerator().generate()

if __name__ == "__main__":
  main()
