#!/usr/bin/python
# Used to automatically pull in external dependencies defined in Maven into Pants' 3rdparty BUILD

import logging
import os
import sys

from pom_utils import PomUtils


logger = logging.getLogger(__name__)


# Exclude targets handled already in 3rdparty/BUILD... It would be nice to be able to figure this out dynamically
_excludes = [
              #'com.google.guava.guava',
            ]
_loaded_artifacts = []
_loaded_names = []


class ThirdPartyBuildGenerator(object):
  _deps = PomUtils.dependency_management_finder().find_dependencies('parents/base/pom.xml')

  def __init__(self):
    pass

  def generate(self):
    buf = "# Automatically generated by {0}\n\n".format(os.path.basename(sys.argv[0]))

    for dep in ThirdPartyBuildGenerator._deps:
      artifact = "{groupId}.{artifactId}".format(groupId=dep['groupId'] ,
                                                 artifactId=dep['artifactId'])
      if artifact in _excludes:
        logger.debug("skipping " + artifact)
        continue

      force_attribute = ""
      if artifact in _loaded_artifacts:
        # pants normally complains about 2 artifact names with different versions,
        # like com.squareup.okhttp.mockwebserver, but we sometimes use multiple versions.
        force_attribute = "force=True,"

      # Format a 'jar' type of dependency
      if not dep.has_key('type') or dep['type'] == 'jar':
        name = artifact
        if force_attribute:
          name += "-{0}".format(dep['version'])
        jar_excludes = ""
        if dep.has_key('exclusions'):
          for jar_exclude in dep['exclusions']:
            jar_excludes += ".exclude(org='{groupId}', name='{artifactId}')".format(
              groupId=jar_exclude['groupId'],
              artifactId=jar_exclude['artifactId'])

        logger.debug("Adding {artifact} as {name}.".format(artifact=artifact, name=name))

        buf += """
jar_library(name='{name}',
    jars=[
      sjar(org='{groupId}',
           name='{artifactId}',
           rev='{version}',{force_attribute}){jar_excludes},
    ],
)""".format(name=name, groupId=dep['groupId'], artifactId=dep['artifactId'], version=dep['version'],
            force_attribute=force_attribute, jar_excludes=jar_excludes)
        _loaded_names.append(name)
        _loaded_artifacts.append(artifact)
    return buf


def main():
  """Test driver that spits out <dependencyManagement> contents.
     Run from ~/Development/java
  """
  print(ThirdPartyBuildGenerator().generate())


if __name__ == "__main__":
  PomUtils.parse_common_args(sys.argv[1:])
  main()
