#!/usr/bin/python
# Used to automatically pull in external dependencies defined in Maven into Pants' 3rdparty BUILD

import logging
import os
import sys
from collections import defaultdict, namedtuple
from textwrap import dedent

from pom_utils import PomUtils
from generation_utils import GenerationUtils
from target_template import Target
from pom_file import PomFile

logger = logging.getLogger(__name__)


# Exclude targets handled already in 3rdparty/BUILD... It would be nice to be able to figure this out dynamically
_excludes = [
              #'com.google.guava.guava',
            ]


class ThirdPartyBuildGenerator(object):

  @classmethod
  def _compute_dependencies(self):
    return PomUtils.dependency_management_finder().find_dependencies('parents/base/pom.xml')

  def __init__(self, dependencies=None):
    if dependencies is None:
      dependencies = self._compute_dependencies()
    self._deps = dependencies

  class Artifact(object):

    Id = namedtuple('Id', ['org', 'name', 'rev'])

    def __init__(self, dep):
      self.groupId = dep['groupId']
      self.artifactId = dep['artifactId']
      self.version = dep['version']
      self.classifier = dep.get('classifier')
      self.type_ = dep.get('type', 'jar')
      self.force = None
      self._exclusions = dep.get('exclusions')

    @property
    def jar_excludes(self):
      if not self._exclusions:
        return None
      return ["exclude(org='{groupId}', name='{artifactId}')".format(**jar)
              for jar in self._exclusions]

    @property
    def name(self):
      return '{0}.{1}'.format(self.groupId, self.artifactId)

    @property
    def id(self):
      return self.Id(self.groupId, self.artifactId, self.version)

    def format(self):
      return Target.sjar.format(org=self.groupId,
                                name=self.artifactId,
                                rev=self.version,
                                classifier=self.classifier,
                                force=self.force,
                                excludes=self.jar_excludes)

  def generate(self):
    buf = "# Automatically generated by {0}\n\n".format(os.path.basename(sys.argv[0]))

    artifacts_by_id = defaultdict(list)
    versions_by_name = defaultdict(set)
    for dep in self._deps:
      artifact = "{groupId}.{artifactId}".format(groupId=dep['groupId'] ,
                                                 artifactId=dep['artifactId'],)
      if artifact in _excludes:
        logger.debug("skipping " + artifact)
        continue
      artifact = self.Artifact(dep)
      artifacts_by_id[artifact.id].append(artifact)
      versions_by_name[artifact.name].add(artifact.version)

    for artifact_id, artifact_list in sorted(artifacts_by_id.items()):
      artifact_name = '{0}.{1}'.format(artifact_id.org, artifact_id.name)
      name_buffer = [artifact_name]
      if len(versions_by_name[artifact_name]) > 1:
        # pants normally complains about 2 artifact names with different versions,
        # like com.squareup.okhttp.mockwebserver, but we sometimes use multiple versions.
        name_buffer.append('-{0}'.format(artifact_id.rev))
        for artifact in artifact_list:
          artifact.force = True

      library_name = ''.join(name_buffer)
      jars = [artifact for artifact in artifact_list if artifact.type_ == 'jar']
      logger.debug("Adding {jars} as {name}.".format(jars=', '.join(jar.name for jar in jars),
                                                     name=library_name))
      jar_library = dedent('''
        jar_library(name='{name}',
          jars=[{jars}
          ],
        )
      ''').format(name=library_name,
                  jars=','.join('\n{}{}'.format(' '*4, jar.format()) for jar in jars))
      buf += GenerationUtils.symbol_substitution(PomFile('parents/base/pom.xml').properties,
                                                 jar_library)
    return buf


def main():
  """Test driver that spits out <dependencyManagement> contents.
     Run from ~/Development/java
  """
  print(ThirdPartyBuildGenerator().generate())


if __name__ == "__main__":
  PomUtils.parse_common_args(sys.argv[1:])
  main()
