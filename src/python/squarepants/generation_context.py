# Utility functions for generating BUILD files.

import os
import sys

class GenerationContext(object):
  """Stores flags for and provides utilities for generating BUILD files.

  :param build_file_name: the name for generated build files (default BUILD.gen).
  :param aux_build_file_name: the name for auxiliary build files (default BUILD.aux).
  :param hand_written_build_file_name: the name of hand written BUILD files (to check to see whether
    to generate BUILD.gen's or BUILD.aux's). (default BUILD).
  :param exclude_project_targets: these directories won't be considered as targets for regular
    projects.
  :param print_headers: whether to print the '# generated by <script_name> ... ' comments at the top
    of generated build files.
  """
  def __init__(self,
               build_file_name=None,
               aux_build_file_name=None,
               hand_written_build_file_name=None,
               exclude_project_targets=None,
               print_headers=None):
    self.build_file_name = build_file_name or "BUILD.gen"
    self.aux_build_file_name =  aux_build_file_name or "BUILD.aux"
    self.hand_written_build_file_name = hand_written_build_file_name or "BUILD"
    self.exclude_project_targets = exclude_project_targets
    if self.exclude_project_targets is None:
      self.exclude_project_targets = [
        'parents/external-protos',
      ]
    self.print_headers = print_headers
    if self.print_headers is None:
      self.print_headers = True

  def format_spec(self, path=None, name=None):
    return "'{}:{}'".format(path or '', name or '')

  def is_aux(self, directory):
    return os.path.exists(os.path.join(directory, self.hand_written_build_file_name))

  def infer_target_name(self, directory, name):
    if name.startswith('aux-'):
      return name # Already aux'd, don't want to do again.
    if self.is_aux(directory):
      return 'aux-{name}'.format(name=name)
    return name

  def infer_build_name(self, directory):
    if self.is_aux(directory):
      return os.path.join(directory, self.aux_build_file_name)
    return os.path.join(directory, self.build_file_name)

  def write_build_file(self, path, contents):
    """Conditionally Write the BUILD file out to the filesystem"""
    outfile_name = self.infer_build_name(path)
    if (self.print_headers):
      header = '# {filepath}\n# Automatically generated by {gen_script}\n'.format(
        filepath=outfile_name,
        gen_script=os.path.basename(sys.argv[0]))
      contents = header + contents
    outfile = open(outfile_name, 'w')
    outfile.write(contents)
    outfile.close()